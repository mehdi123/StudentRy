// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "pedit.h"

/////////////////////////////////////////////////////////////////////////////
// CPEdit

IMPLEMENT_DYNCREATE(CPEdit, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CPEdit properties

BOOL CPEdit::GetAutoHScroll()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CPEdit::SetAutoHScroll(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

BOOL CPEdit::GetPassword()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CPEdit::SetPassword(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CPEdit::GetBorder()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CPEdit::SetBorder(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CPEdit::GetReadOnly()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CPEdit::SetReadOnly(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CPEdit::GetClientEdge()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CPEdit::SetClientEdge(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

BOOL CPEdit::GetStaticEdge()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CPEdit::SetStaticEdge(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

BOOL CPEdit::GetModalFrame()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CPEdit::SetModalFrame(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

BOOL CPEdit::GetRight()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CPEdit::SetRight(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

CString CPEdit::GetFontName()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CPEdit::SetFontName(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

long CPEdit::GetFontSize()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CPEdit::SetFontSize(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

short CPEdit::GetFontSet()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CPEdit::SetFontSet(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CPEdit operations

long CPEdit::GetLength()
{
	long result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CPEdit::GetText()
{
	CString result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CPEdit::SetText(LPCTSTR str)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 str);
}
